//
//  EnergyTipsView.swift
//  EnergyMonitor
//
//  Created by Mohamed Hamdi on 02/08/2025.
//

import SwiftUI

struct EnergyTipsView: View {
    @EnvironmentObject var localizationManager: LocalizationManager
    @State private var selectedCategory: EnergyTip.TipCategory = .general
    @State private var searchText = ""
    
    private let energyTips: [EnergyTip] = [
        EnergyTip(
            titleAR: "ÿßÿ∂ÿ®ÿ∑ ÿßŸÑŸÖŸÉŸäŸÅ ÿπŸÑŸâ 24 ÿØÿ±ÿ¨ÿ© ŸÖÿ¶ŸàŸäÿ©",
            titleEN: "Set AC to 24¬∞C",
            descriptionAR: "ŸÉŸÑ ÿØÿ±ÿ¨ÿ© ÿ£ŸÇŸÑ ŸÖŸÜ 24 ÿ™ÿ≤ŸäÿØ ÿßÿ≥ÿ™ŸáŸÑÿßŸÉ ÿßŸÑŸÉŸáÿ±ÿ®ÿßÿ° ÿ®ŸÜÿ≥ÿ®ÿ© 6-8%. ÿØÿ±ÿ¨ÿ© 24 ŸÖÿ¶ŸàŸäÿ© ŸáŸä ÿßŸÑÿØÿ±ÿ¨ÿ© ÿßŸÑŸÖÿ´ŸÑŸâ ŸÑŸÑÿ±ÿßÿ≠ÿ© ŸàÿßŸÑŸÉŸÅÿßÿ°ÿ©",
            descriptionEN: "Each degree below 24¬∞C increases electricity consumption by 6-8%. 24¬∞C is optimal for comfort and efficiency",
            category: .cooling,
            estimatedSavings: "15-20%",
            difficulty: .easy,
            icon: "thermometer"
        ),
        EnergyTip(
            titleAR: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸÖÿ±ÿßŸàÿ≠ ŸÖÿπ ÿßŸÑŸÖŸÉŸäŸÅ",
            titleEN: "Use fans with AC",
            descriptionAR: "ÿßŸÑŸÖÿ±ÿßŸàÿ≠ ÿ™ÿ≥ÿßÿπÿØ ÿπŸÑŸâ ÿ™Ÿàÿ≤Ÿäÿπ ÿßŸÑŸáŸàÿßÿ° ÿßŸÑÿ®ÿßÿ±ÿØ ÿ®ÿ¥ŸÉŸÑ ÿ£ŸÅÿ∂ŸÑÿå ŸÖŸÖÿß Ÿäÿ≥ŸÖÿ≠ ÿ®ÿ±ŸÅÿπ ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑŸÖŸÉŸäŸÅ ÿØÿ±ÿ¨ÿ™ŸäŸÜ ŸÖÿπ ÿßŸÑÿ≠ŸÅÿßÿ∏ ÿπŸÑŸâ ÿßŸÑÿ±ÿßÿ≠ÿ©",
            descriptionEN: "Fans help distribute cool air better, allowing you to raise AC temperature by 2¬∞C while maintaining comfort",
            category: .cooling,
            estimatedSavings: "10-15%",
            difficulty: .easy,
            icon: "wind"
        ),
        EnergyTip(
            titleAR: "ŸÜÿ∏ŸÅ ŸÅŸÑÿßÿ™ÿ± ÿßŸÑŸÖŸÉŸäŸÅ ÿ¥Ÿáÿ±ŸäÿßŸã",
            titleEN: "Clean AC filters monthly",
            descriptionAR: "ÿßŸÑŸÅŸÑÿßÿ™ÿ± ÿßŸÑŸÖÿ™ÿ≥ÿÆÿ© ÿ™ÿ¨ÿπŸÑ ÿßŸÑŸÖŸÉŸäŸÅ ŸäÿπŸÖŸÑ ÿ®ÿ¨ŸáÿØ ÿ£ŸÉÿ®ÿ±. ÿßŸÑÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑÿ¥Ÿáÿ±Ÿä Ÿäÿ≠ÿ≥ŸÜ ÿßŸÑŸÉŸÅÿßÿ°ÿ© ŸàŸäŸàŸÅÿ± ÿßŸÑÿ∑ÿßŸÇÿ©",
            descriptionEN: "Dirty filters make AC work harder. Monthly cleaning improves efficiency and saves energy",
            category: .cooling,
            estimatedSavings: "5-10%",
            difficulty: .easy,
            icon: "air.purifier"
        ),
        EnergyTip(
            titleAR: "ÿßÿ≥ÿ™ÿÆÿØŸÖ LED ÿ®ÿØŸÑÿßŸã ŸÖŸÜ ÿßŸÑŸÖÿµÿßÿ®Ÿäÿ≠ ÿßŸÑÿπÿßÿØŸäÿ©",
            titleEN: "Use LED instead of regular bulbs",
            descriptionAR: "ŸÖÿµÿßÿ®Ÿäÿ≠ LED ÿ™ÿ≥ÿ™ŸáŸÑŸÉ ÿ∑ÿßŸÇÿ© ÿ£ŸÇŸÑ ÿ®ŸÜÿ≥ÿ®ÿ© 80% Ÿàÿ™ÿØŸàŸÖ ÿ£ÿ∑ŸàŸÑ 25 ŸÖÿ±ÿ© ŸÖŸÜ ÿßŸÑŸÖÿµÿßÿ®Ÿäÿ≠ ÿßŸÑÿ™ŸÇŸÑŸäÿØŸäÿ©",
            descriptionEN: "LED bulbs use 80% less energy and last 25 times longer than traditional bulbs",
            category: .lighting,
            estimatedSavings: "75-80%",
            difficulty: .easy,
            icon: "lightbulb"
        ),
        EnergyTip(
            titleAR: "ÿßŸÅÿµŸÑ ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ© ÿπŸÜÿØ ÿπÿØŸÖ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ",
            titleEN: "Unplug devices when not in use",
            descriptionAR: "ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ© ŸÅŸä Ÿàÿ∂ÿπ ÿßŸÑÿßÿ≥ÿ™ÿπÿØÿßÿØ ÿ™ÿ≥ÿ™ŸáŸÑŸÉ ÿ∑ÿßŸÇÿ©. ŸÅÿµŸÑŸáÿß ŸÉŸÑŸäÿßŸã ŸäŸàŸÅÿ± 5-10% ŸÖŸÜ ŸÅÿßÿ™Ÿàÿ±ÿ© ÿßŸÑŸÉŸáÿ±ÿ®ÿßÿ°",
            descriptionEN: "Devices on standby consume power. Unplugging saves 5-10% on electricity bills",
            category: .appliances,
            estimatedSavings: "5-10%",
            difficulty: .easy,
            icon: "powerplug"
        ),
        EnergyTip(
            titleAR: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ≥ÿ™ÿßÿ¶ÿ± ÿßŸÑÿπÿßÿ≤ŸÑÿ©",
            titleEN: "Use insulating curtains",
            descriptionAR: "ÿßŸÑÿ≥ÿ™ÿßÿ¶ÿ± ÿßŸÑÿπÿßÿ≤ŸÑÿ© ÿ™ŸÖŸÜÿπ ÿØÿÆŸàŸÑ ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ© ŸÜŸáÿßÿ±ÿßŸã Ÿàÿ™ÿ≠ÿßŸÅÿ∏ ÿπŸÑŸâ ÿ®ÿ±ŸàÿØÿ© ÿßŸÑŸÖŸÜÿ≤ŸÑÿå ŸÖŸÖÿß ŸäŸÇŸÑŸÑ ÿßŸÑÿ≠ÿßÿ¨ÿ© ŸÑŸÑŸÖŸÉŸäŸÅ",
            descriptionEN: "Insulating curtains block heat during day and keep home cool, reducing AC needs",
            category: .cooling,
            estimatedSavings: "10-15%",
            difficulty: .medium,
            icon: "curtains.closed"
        )
    ]
    
    var filteredTips: [EnergyTip] {
        var tips = energyTips
        
        if selectedCategory != .general {
            tips = tips.filter { $0.category == selectedCategory }
        }
        
        if !searchText.isEmpty {
            tips = tips.filter { tip in
                let title = localizationManager.isArabic ? tip.titleAR : tip.titleEN
                let description = localizationManager.isArabic ? tip.descriptionAR : tip.descriptionEN
                return title.localizedCaseInsensitiveContains(searchText) ||
                       description.localizedCaseInsensitiveContains(searchText)
            }
        }
        
        return tips
    }
    
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                // Search Bar
                SearchBar(text: $searchText)
                    .padding(.horizontal)
                
                // Category Filter
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 12) {
                        ForEach(EnergyTip.TipCategory.allCases, id: \.self) { category in
                            CategoryChip(
                                category: category,
                                isSelected: selectedCategory == category,
                                action: { selectedCategory = category }
                            )
                        }
                    }
                    .padding(.horizontal)
                }
                .padding(.vertical, 8)
                
                // Tips List
                ScrollView {
                    LazyVStack(spacing: 12) {
                        ForEach(filteredTips) { tip in
                            EnergyTipCard(tip: tip)
                        }
                    }
                    .padding()
                }
            }
            .navigationTitle(localizationManager.localizedString("energy_tips"))
        }
    }
}

struct SearchBar: View {
    @Binding var text: String
    
    var body: some View {
        HStack {
            Image(systemName: "magnifyingglass")
                .foregroundColor(.gray)
            
            TextField("Search tips...", text: $text)
                .textFieldStyle(RoundedBorderTextFieldStyle())
        }
        .padding(.vertical, 8)
    }
}

struct CategoryChip: View {
    let category: EnergyTip.TipCategory
    let isSelected: Bool
    let action: () -> Void
    
    @EnvironmentObject var localizationManager: LocalizationManager
    
    private var categoryName: String {
        switch category {
        case .general: return localizationManager.isArabic ? "ÿπÿßŸÖ" : "General"
        case .cooling: return localizationManager.isArabic ? "ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ" : "Cooling"
        case .heating: return localizationManager.isArabic ? "ÿßŸÑÿ™ÿØŸÅÿ¶ÿ©" : "Heating"
        case .lighting: return localizationManager.isArabic ? "ÿßŸÑÿ•ÿ∂ÿßÿ°ÿ©" : "Lighting"
        case .appliances: return localizationManager.isArabic ? "ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ©" : "Appliances"
        }
    }
    
    var body: some View {
        Button(action: action) {
            Text(categoryName)
                .font(.caption)
                .fontWeight(.medium)
                .padding(.horizontal, 16)
                .padding(.vertical, 8)
                .background(isSelected ? Color.green : Color(.systemGray5))
                .foregroundColor(isSelected ? .white : .primary)
                .cornerRadius(16)
        }
    }
}

struct EnergyTipCard: View {
    let tip: EnergyTip
    @EnvironmentObject var localizationManager: LocalizationManager
    
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Image(systemName: tip.icon)
                    .font(.title2)
                    .foregroundColor(.green)
                
                VStack(alignment: .leading, spacing: 4) {
                    Text(localizationManager.isArabic ? tip.titleAR : tip.titleEN)
                        .font(.headline)
                        .multilineTextAlignment(.leading)
                    
                    HStack {
                        DifficultyBadge(difficulty: tip.difficulty)
                        Spacer()
                        SavingsBadge(savings: tip.estimatedSavings)
                    }
                }
                
                Spacer()
            }
            
            Text(localizationManager.isArabic ? tip.descriptionAR : tip.descriptionEN)
                .font(.body)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.leading)
        }
        .padding()
        .background(Color(.systemGray6))
        .cornerRadius(12)
    }
}

struct DifficultyBadge: View {
    let difficulty: EnergyTip.Difficulty
    
    var color: Color {
        switch difficulty {
        case .easy: return .green
        case .medium: return .orange
        case .hard: return .red
        }
    }
    
    var body: some View {
        Text(difficulty.rawValue.capitalized)
            .font(.caption)
            .padding(.horizontal, 8)
            .padding(.vertical, 4)
            .background(color.opacity(0.2))
            .foregroundColor(color)
            .cornerRadius(8)
    }
}

struct SavingsBadge: View {
    let savings: String
    
    var body: some View {
        Text("üí∞ \(savings)")
            .font(.caption)
            .fontWeight(.semibold)
            .padding(.horizontal, 8)
            .padding(.vertical, 4)
            .background(Color.green.opacity(0.2))
            .foregroundColor(.green)
            .cornerRadius(8)
    }
}
